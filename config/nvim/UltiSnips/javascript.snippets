snippet jqueryfunction "Self executing jquery function" b
;(function ($) {
	$0
})(jQuery)
endsnippet

snippet scf "Self executing normal function" b
;(function () {

	$0

})()
endsnippet

snippet log "console log the things" w
console.log($0)
endsnippet

snippet reactstateless "A basic stateless placeholder" b
import React from 'react';

const ${1:MyComponent} = () => (
	${2:<div>$1</div>}
);

export default $1;
endsnippet

snippet react "Stateful react snippet" b
import React, { Component } from 'react';

class ${1:MyComponent} extends Component {
	render () {
		return (
			${2:<h1>Hello</h1>}
		);
	}
}

export default $1;
endsnippet

snippet pureReact "Stateful react snippet" b
import React, { PureComponent } from 'react';

class ${1:MyComponent} extends PureComponent {
	render () {
		return (
			${2:<h1>Hello</h1>}
		);
	}
}

export default $1;
endsnippet

snippet sasstest "Sass Test with Jest" b
const path = require('path')
const sassTrue = require('sass-true')

const sassFile = path.join(__dirname, '$0.test.scss')

sassTrue.runSass({ file: sassFile }, describe, test)
endsnippet

snippet snapshotTest "React test with jest snapshot" b
/* eslint-env jest */
import React from 'react'
import { shallow } from 'enzyme'
import 'jest-styled-components'

import ${1:Component} from '${2:./index}'

describe('$1 Component', () => {
	test('$1 Passes shallow snapshot', () => {
		const wrapper = shallow(<$1 />)
		expect(wrapper).toMatchSnapshot()
	})
})
endsnippet

snippet styled "Styled Component" b
import styled from 'styled-components';

export const ${1:Component} = styled.${2:div}\`
	$0
\`;
endsnippet

snippet styled-test "Styled Component Test" b
import React from 'react'
import styled from 'styled-components'
import renderer from 'react-test-renderer'
import 'jest-styled-components'
import { ${1:Component} } from '..'

test('$1 works!', () => {
	const Test = styled.div\`
		\${$1}
	\`
	const tree = renderer.create(<Test />).toJSON()
	expect(tree).toMatchSnapshot()
	expect(tree).toHaveStyleRule('$2', '$3')
})
endsnippet

snippet expect-style "Styled Component" w
expect(tree).toHaveStyleRule('$1', '$2')
endsnippet

snippet sc "Styled Component" b
export const ${1:Component} = styled.${2:div}\`
	$0
\`;
endsnippet

snippet im "import local"
import ${1:Module} from './$1';
endsnippet

snippet eda "export default as"
export { default as ${1:Module} } from './$1';
endsnippet

snippet edf "export default from"
export { default } from './$1';
endsnippet

snippet ex "export default"
export default $1;
endsnippet

snippet eo "export object"
export {
	$1
};
endsnippet

snippet mq "media query" w
@media (${1:min}-width: ${2:768}px) {
	$0
}
endsnippet
